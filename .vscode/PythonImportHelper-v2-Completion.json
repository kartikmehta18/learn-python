[
    {
        "label": "find_index",
        "importPath": "my_module",
        "description": "my_module",
        "isExtraImport": true,
        "detail": "my_module",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "my_module",
        "description": "my_module",
        "isExtraImport": true,
        "detail": "my_module",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "click",
        "description": "click",
        "isExtraImport": true,
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "hellow_func",
        "kind": 2,
        "importPath": "8functions.8functions",
        "description": "8functions.8functions",
        "peekOfCode": "def hellow_func():\n    a =5+6\n    print(a)\n# hellow_func()\n# value passing function\ndef greet_fun(greeting , name=\"name\"):\n    return '{}, /{}'.format(greeting , name)\n# print(greet_fun(\"hi\", \"kartik\"))    \n# new asvance function we pass this in function *args, **kwargs it store default inp paramater \n#values or default any kind of data ",
        "detail": "8functions.8functions",
        "documentation": {}
    },
    {
        "label": "greet_fun",
        "kind": 2,
        "importPath": "8functions.8functions",
        "description": "8functions.8functions",
        "peekOfCode": "def greet_fun(greeting , name=\"name\"):\n    return '{}, /{}'.format(greeting , name)\n# print(greet_fun(\"hi\", \"kartik\"))    \n# new asvance function we pass this in function *args, **kwargs it store default inp paramater \n#values or default any kind of data \ndef student(*args, **kwargs):\n    print(args) #touple\n    print(kwargs) # dictonary key , vaalue\n# student('math' ,\"art\", name='kartik' , age =21)\ndef student1(*args, **kwargs):",
        "detail": "8functions.8functions",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 2,
        "importPath": "8functions.8functions",
        "description": "8functions.8functions",
        "peekOfCode": "def student(*args, **kwargs):\n    print(args) #touple\n    print(kwargs) # dictonary key , vaalue\n# student('math' ,\"art\", name='kartik' , age =21)\ndef student1(*args, **kwargs):\n    print(args) #touple\n    print(kwargs) # dictonary key , vaalue\ncourses =['math', 'art']\ninfo = {'name': 'kartik', 'age': 21}\n# student1(courses,info) this prints (['math', 'art'], {'name': 'kartik', 'age': 21}) we got all in touple we solve",
        "detail": "8functions.8functions",
        "documentation": {}
    },
    {
        "label": "student1",
        "kind": 2,
        "importPath": "8functions.8functions",
        "description": "8functions.8functions",
        "peekOfCode": "def student1(*args, **kwargs):\n    print(args) #touple\n    print(kwargs) # dictonary key , vaalue\ncourses =['math', 'art']\ninfo = {'name': 'kartik', 'age': 21}\n# student1(courses,info) this prints (['math', 'art'], {'name': 'kartik', 'age': 21}) we got all in touple we solve\nstudent1(*courses,**info) # unpact the values",
        "detail": "8functions.8functions",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "8functions.8functions",
        "description": "8functions.8functions",
        "peekOfCode": "info = {'name': 'kartik', 'age': 21}\n# student1(courses,info) this prints (['math', 'art'], {'name': 'kartik', 'age': 21}) we got all in touple we solve\nstudent1(*courses,**info) # unpact the values",
        "detail": "8functions.8functions",
        "documentation": {}
    },
    {
        "label": "is_leap",
        "kind": 2,
        "importPath": "8functions.leapyr",
        "description": "8functions.leapyr",
        "peekOfCode": "def is_leap(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 ==0)\ndef dayinmonth(year, month):\n    if not 1<= month <=12:\n        return \"invalid month\"\n    if month ==2 and is_leap(year):\n        return 29\n    return monthday[month]\nprint(is_leap(2020))\nprint(dayinmonth(2020,2))",
        "detail": "8functions.leapyr",
        "documentation": {}
    },
    {
        "label": "dayinmonth",
        "kind": 2,
        "importPath": "8functions.leapyr",
        "description": "8functions.leapyr",
        "peekOfCode": "def dayinmonth(year, month):\n    if not 1<= month <=12:\n        return \"invalid month\"\n    if month ==2 and is_leap(year):\n        return 29\n    return monthday[month]\nprint(is_leap(2020))\nprint(dayinmonth(2020,2))",
        "detail": "8functions.leapyr",
        "documentation": {}
    },
    {
        "label": "find_index",
        "kind": 2,
        "importPath": "9importmod.my_module",
        "description": "9importmod.my_module",
        "peekOfCode": "def find_index(to_serch, target):\n    for i, value in  enumerate(to_serch):\n        if value == target:\n            return i\n    return -1",
        "detail": "9importmod.my_module",
        "documentation": {}
    },
    {
        "label": "rads",
        "kind": 5,
        "importPath": "9importmod.randomc",
        "description": "9importmod.randomc",
        "peekOfCode": "rads = math.radians(90)\nprint(rads)\nimport datetime\nimport calendar\ntoday = datetime.date.today()\nprint(today)\nprint(calendar.isleap(2017))\nimport os \nprint(os.getcwd())",
        "detail": "9importmod.randomc",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "9importmod.randomc",
        "description": "9importmod.randomc",
        "peekOfCode": "today = datetime.date.today()\nprint(today)\nprint(calendar.isleap(2017))\nimport os \nprint(os.getcwd())",
        "detail": "9importmod.randomc",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "oops.oops",
        "description": "oops.oops",
        "peekOfCode": "class Student:\n    # name=\"kartik\"\n    # default constreuctor\n    def __init__(self):\n        pass\n    # paramaterize constructio\n    def __init__(self,name,cgpa):\n        self.name=name\n        self.cgpa=cgpa\n        print(\"adding new student\")",
        "detail": "oops.oops",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "oops.oops",
        "description": "oops.oops",
        "peekOfCode": "class Car:\n    color=\"blue\"\n    brand=\"audi\"\ncar1 = Car()\nprint(car1.color)\nprint(car1.brand)",
        "detail": "oops.oops",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "oops.oops",
        "description": "oops.oops",
        "peekOfCode": "car1 = Car()\nprint(car1.color)\nprint(car1.brand)",
        "detail": "oops.oops",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "10legb",
        "description": "10legb",
        "peekOfCode": "def test(z):\n    y='local y' # local define cannot acces out side of function\n    print(y)\n    print(z)\ntest(\"local z\")\n# bultin function in python\nimport builtins\n# print(dir(builtins))\ndef my_min():\n    pass",
        "detail": "10legb",
        "documentation": {}
    },
    {
        "label": "my_min",
        "kind": 2,
        "importPath": "10legb",
        "description": "10legb",
        "peekOfCode": "def my_min():\n    pass\n# m= min([5,1,4,2,3])\n# print(m)\n#enclosing have nested function\ndef outer():\n    x='outer x' # when we comment this got error             \n    def inner():\n        nonlocal x #  nonlocal working as global variable\n        x='inner x' # when we comment this got outer X ans",
        "detail": "10legb",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "10legb",
        "description": "10legb",
        "peekOfCode": "def outer():\n    x='outer x' # when we comment this got error             \n    def inner():\n        nonlocal x #  nonlocal working as global variable\n        x='inner x' # when we comment this got outer X ans\n        print(x)\n    inner()\n    print(x)\nouter()",
        "detail": "10legb",
        "documentation": {}
    },
    {
        "label": "gen_func",
        "kind": 2,
        "importPath": "12listcompher",
        "description": "12listcompher",
        "peekOfCode": "def gen_func(nums):\n    for n in nums:\n       yield n*n\nmy_gen = gen_func(nums)\nfor i in my_gen:\n    print(i)\nmy_gen =(n*n for n in nums)",
        "detail": "12listcompher",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "12listcompher",
        "description": "12listcompher",
        "peekOfCode": "my_list = filter(lambda n: n%2 ==0, nums)\nprint(list(my_list))\n#dictonary comprehension \nnames= ['Bruce', 'Clark', 'Peter', 'Logan', 'Wade']\nheros =['Batman', 'Superman', 'Spiderman', 'Wolverine', 'Deadpool']\nprint (list(zip(names,heros)))\n# my_dict ={}\n# for name, hero in zip(names,heros):\n#     my_dict[name] = hero\n# print(my_dict)",
        "detail": "12listcompher",
        "documentation": {}
    },
    {
        "label": "my_set",
        "kind": 5,
        "importPath": "12listcompher",
        "description": "12listcompher",
        "peekOfCode": "my_set = set()\nfor n in nums:\n    my_set.add(n)\nprint(my_set)\nmy_set = {n for n in nums}\nprint (my_set)\n# generator expression\n# I want to yield 'n*n' for each 'n' in nums\nnums =[1,2,3,4,5,6,7,8,9,10]\ndef gen_func(nums):",
        "detail": "12listcompher",
        "documentation": {}
    },
    {
        "label": "my_set",
        "kind": 5,
        "importPath": "12listcompher",
        "description": "12listcompher",
        "peekOfCode": "my_set = {n for n in nums}\nprint (my_set)\n# generator expression\n# I want to yield 'n*n' for each 'n' in nums\nnums =[1,2,3,4,5,6,7,8,9,10]\ndef gen_func(nums):\n    for n in nums:\n       yield n*n\nmy_gen = gen_func(nums)\nfor i in my_gen:",
        "detail": "12listcompher",
        "documentation": {}
    },
    {
        "label": "my_gen",
        "kind": 5,
        "importPath": "12listcompher",
        "description": "12listcompher",
        "peekOfCode": "my_gen = gen_func(nums)\nfor i in my_gen:\n    print(i)\nmy_gen =(n*n for n in nums)",
        "detail": "12listcompher",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    def __repr__(self):\n        return '({},{},${})'.format(self.name, self.age, self.salary)\ne1 = Employee('Carl', 37, 70000)\ne2 = Employee('Sarah', 29, 80000)\ne3 = Employee('John', 43, 90000)",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "sli",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "sli = sorted(li)\nprint('Sorted list:', sli)\n#reverse\nslir = sorted(li, reverse=True)\nprint('Sorted reverse list:', slir)\nli.sort()   # li.sort(reverse=True)\nprint(li)\n# tuple\ntup =(9,1,8,2,7,3,6,4,5)\ns_tup = sorted(tup) # it does not have this tup.sort()",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "slir",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "slir = sorted(li, reverse=True)\nprint('Sorted reverse list:', slir)\nli.sort()   # li.sort(reverse=True)\nprint(li)\n# tuple\ntup =(9,1,8,2,7,3,6,4,5)\ns_tup = sorted(tup) # it does not have this tup.sort()\nprint('Sorted tuple:', s_tup)\n#dictionary\ndi ={'name':'Corey', 'job':'programming', 'age':None, 'os':'Mac'}",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "s_tup",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "s_tup = sorted(tup) # it does not have this tup.sort()\nprint('Sorted tuple:', s_tup)\n#dictionary\ndi ={'name':'Corey', 'job':'programming', 'age':None, 'os':'Mac'}\ns_di=sorted(di)\nprint('Sorted dictionary:', s_di)\n# objects sorting \nclass Employee:\n    def __init__(self, name, age, salary):\n        self.name = name",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "e1 = Employee('Carl', 37, 70000)\ne2 = Employee('Sarah', 29, 80000)\ne3 = Employee('John', 43, 90000)\nemployees =[e1,e2,e3]\n# def e_sort(emp):\n    # return emp.name\n# s_employees = sorted(employees, key=e_sort) by name\ns_employees = sorted(employees, key=lambda e: e.age)\nprint(s_employees)",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "e2",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "e2 = Employee('Sarah', 29, 80000)\ne3 = Employee('John', 43, 90000)\nemployees =[e1,e2,e3]\n# def e_sort(emp):\n    # return emp.name\n# s_employees = sorted(employees, key=e_sort) by name\ns_employees = sorted(employees, key=lambda e: e.age)\nprint(s_employees)",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "e3",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "e3 = Employee('John', 43, 90000)\nemployees =[e1,e2,e3]\n# def e_sort(emp):\n    # return emp.name\n# s_employees = sorted(employees, key=e_sort) by name\ns_employees = sorted(employees, key=lambda e: e.age)\nprint(s_employees)",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "s_employees",
        "kind": 5,
        "importPath": "13sortinglisttuplesall",
        "description": "13sortinglisttuplesall",
        "peekOfCode": "s_employees = sorted(employees, key=lambda e: e.age)\nprint(s_employees)",
        "detail": "13sortinglisttuplesall",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\npl = Person('Jack', 33)\nsentence = 'My name is {0.name} and I am {0.age} years old'.format(pl)\nprint(sentence)\n# for decimal places we want to use f at {;.2f}\nsentence = '1 mb is equal to {:,} bytes'.format(1000**2)\nprint(sentence)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "person = {'name':'jenn', 'age':23}\n# sentence = 'My name is {} and I am {} years old'.format(person['name'], person['age'])\n# print(sentence)\nsentence = 'My name is {0} and I am {1} years old'.format(person['name'], person['age'])\nprint(sentence)\n# sentence = 'My name is {0[name]} and I am {1[age]} years old'.format(person)\n# print(sentence)\nl = {'name': 'John', 'age': 30}\nsentence = 'My name is {name} and I am {age} years old'.format(**l)\nprint(sentence)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "sentence = 'My name is {0} and I am {1} years old'.format(person['name'], person['age'])\nprint(sentence)\n# sentence = 'My name is {0[name]} and I am {1[age]} years old'.format(person)\n# print(sentence)\nl = {'name': 'John', 'age': 30}\nsentence = 'My name is {name} and I am {age} years old'.format(**l)\nprint(sentence)\ntag='h1'\ntext='this is a headline'\nsentence='<{0}>{1}</{0}>'.format(tag, text)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "l = {'name': 'John', 'age': 30}\nsentence = 'My name is {name} and I am {age} years old'.format(**l)\nprint(sentence)\ntag='h1'\ntext='this is a headline'\nsentence='<{0}>{1}</{0}>'.format(tag, text)\nprint(sentence)\nsentence=f'<{tag}>{text}</{tag}>'\nprint(sentence)\n# now object oriented way",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "sentence = 'My name is {name} and I am {age} years old'.format(**l)\nprint(sentence)\ntag='h1'\ntext='this is a headline'\nsentence='<{0}>{1}</{0}>'.format(tag, text)\nprint(sentence)\nsentence=f'<{tag}>{text}</{tag}>'\nprint(sentence)\n# now object oriented way\nclass Person:",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "pl",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "pl = Person('Jack', 33)\nsentence = 'My name is {0.name} and I am {0.age} years old'.format(pl)\nprint(sentence)\n# for decimal places we want to use f at {;.2f}\nsentence = '1 mb is equal to {:,} bytes'.format(1000**2)\nprint(sentence)\n# date time\nimport datetime\nmy_date = datetime.datetime(2016, 9, 24, 12, 30, 45)\nprint(my_date)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "sentence = 'My name is {0.name} and I am {0.age} years old'.format(pl)\nprint(sentence)\n# for decimal places we want to use f at {;.2f}\nsentence = '1 mb is equal to {:,} bytes'.format(1000**2)\nprint(sentence)\n# date time\nimport datetime\nmy_date = datetime.datetime(2016, 9, 24, 12, 30, 45)\nprint(my_date)\nsentence = '{:%B %d, %Y}'.format(my_date)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "sentence = '1 mb is equal to {:,} bytes'.format(1000**2)\nprint(sentence)\n# date time\nimport datetime\nmy_date = datetime.datetime(2016, 9, 24, 12, 30, 45)\nprint(my_date)\nsentence = '{:%B %d, %Y}'.format(my_date)\nprint(sentence)\n# MORE COMPLEX\nsentence= '{0:%B %d, %Y} fell on a {0:%A} and was the {0:%j} day of the year'.format(my_date)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "my_date",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "my_date = datetime.datetime(2016, 9, 24, 12, 30, 45)\nprint(my_date)\nsentence = '{:%B %d, %Y}'.format(my_date)\nprint(sentence)\n# MORE COMPLEX\nsentence= '{0:%B %d, %Y} fell on a {0:%A} and was the {0:%j} day of the year'.format(my_date)\nprint(sentence)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "15StringFormatting",
        "description": "15StringFormatting",
        "peekOfCode": "sentence = '{:%B %d, %Y}'.format(my_date)\nprint(sentence)\n# MORE COMPLEX\nsentence= '{0:%B %d, %Y} fell on a {0:%A} and was the {0:%j} day of the year'.format(my_date)\nprint(sentence)",
        "detail": "15StringFormatting",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "d = datetime.date (2016,7,24)\nprint(d)\ntday = datetime.date.today()\nprint(tday.weekday()) # Monday = 0, Sunday = 6\nprint(tday.isoweekday()) # Monday = 1, Sunday = 7\ntdelta = datetime.timedelta(days=7) # adding 7 days\nprint(tday + tdelta) # adding 7 days to current date\nprint(tday - tdelta) # subtracting 7 days from current date\\\\\nbday = datetime.date(2004, 6, 18)\ntill_bdy = bday - tday",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "tday",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "tday = datetime.date.today()\nprint(tday.weekday()) # Monday = 0, Sunday = 6\nprint(tday.isoweekday()) # Monday = 1, Sunday = 7\ntdelta = datetime.timedelta(days=7) # adding 7 days\nprint(tday + tdelta) # adding 7 days to current date\nprint(tday - tdelta) # subtracting 7 days from current date\\\\\nbday = datetime.date(2004, 6, 18)\ntill_bdy = bday - tday\nprint(till_bdy.total_seconds())\nprint(till_bdy.days)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "tdelta",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "tdelta = datetime.timedelta(days=7) # adding 7 days\nprint(tday + tdelta) # adding 7 days to current date\nprint(tday - tdelta) # subtracting 7 days from current date\\\\\nbday = datetime.date(2004, 6, 18)\ntill_bdy = bday - tday\nprint(till_bdy.total_seconds())\nprint(till_bdy.days)\ndt = datetime.datetime(2016, 7, 26, 12, 30, 45, 100000)\nprint(dt)\nprint(dt.time())",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "bday",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "bday = datetime.date(2004, 6, 18)\ntill_bdy = bday - tday\nprint(till_bdy.total_seconds())\nprint(till_bdy.days)\ndt = datetime.datetime(2016, 7, 26, 12, 30, 45, 100000)\nprint(dt)\nprint(dt.time())\nprint(dt.date())\ntdel = datetime.timedelta(hours=12)\nprint(dt + tdel)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "till_bdy",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "till_bdy = bday - tday\nprint(till_bdy.total_seconds())\nprint(till_bdy.days)\ndt = datetime.datetime(2016, 7, 26, 12, 30, 45, 100000)\nprint(dt)\nprint(dt.time())\nprint(dt.date())\ntdel = datetime.timedelta(hours=12)\nprint(dt + tdel)\nprint(\"-----------------\")",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "dt",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "dt = datetime.datetime(2016, 7, 26, 12, 30, 45, 100000)\nprint(dt)\nprint(dt.time())\nprint(dt.date())\ntdel = datetime.timedelta(hours=12)\nprint(dt + tdel)\nprint(\"-----------------\")\nde_today = datetime.datetime.today()\nde_now = datetime.datetime.now()\nde_utcnows = datetime.datetime.utcnow()",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "tdel",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "tdel = datetime.timedelta(hours=12)\nprint(dt + tdel)\nprint(\"-----------------\")\nde_today = datetime.datetime.today()\nde_now = datetime.datetime.now()\nde_utcnows = datetime.datetime.utcnow()\nprint(de_today)\nprint(de_now)\nprint(de_utcnows)\n# using pytz",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "de_today",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "de_today = datetime.datetime.today()\nde_now = datetime.datetime.now()\nde_utcnows = datetime.datetime.utcnow()\nprint(de_today)\nprint(de_now)\nprint(de_utcnows)\n# using pytz\nimport pytz\ndtp=datetime.datetime(2016, 7, 27, 12, 30, 45, tzinfo=pytz.UTC)\nprint(dtp)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "de_now",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "de_now = datetime.datetime.now()\nde_utcnows = datetime.datetime.utcnow()\nprint(de_today)\nprint(de_now)\nprint(de_utcnows)\n# using pytz\nimport pytz\ndtp=datetime.datetime(2016, 7, 27, 12, 30, 45, tzinfo=pytz.UTC)\nprint(dtp)\nde_nowp = datetime.datetime.now(tz=pytz.UTC)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "de_utcnows",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "de_utcnows = datetime.datetime.utcnow()\nprint(de_today)\nprint(de_now)\nprint(de_utcnows)\n# using pytz\nimport pytz\ndtp=datetime.datetime(2016, 7, 27, 12, 30, 45, tzinfo=pytz.UTC)\nprint(dtp)\nde_nowp = datetime.datetime.now(tz=pytz.UTC)\nprint(de_nowp)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "de_nowp",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "de_nowp = datetime.datetime.now(tz=pytz.UTC)\nprint(de_nowp)\n# tz for all time xone\ndt_utcnow = datetime.datetime.utcnow().replace(tzinfo=pytz.UTC)\nfor tz in pytz.all_timezones:\n    tzi = dt_utcnow.astimezone(pytz.timezone(tz))\n    print(tzi , tz)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "dt_utcnow",
        "kind": 5,
        "importPath": "16datemod",
        "description": "16datemod",
        "peekOfCode": "dt_utcnow = datetime.datetime.utcnow().replace(tzinfo=pytz.UTC)\nfor tz in pytz.all_timezones:\n    tzi = dt_utcnow.astimezone(pytz.timezone(tz))\n    print(tzi , tz)",
        "detail": "16datemod",
        "documentation": {}
    },
    {
        "label": "new_a",
        "kind": 5,
        "importPath": "2string_1",
        "description": "2string_1",
        "peekOfCode": "new_a = a.replace('World','universe')\nprint(new_a)\n# concate the two string\nb= \"hello\"\nc=\"kartik\"\n# message= b + \" \" + c + \" \" + \"welcome\"\n# message= ' {}, {} welcome'.format(b,c)\nmessage= f'{b}, {c.upper()} welcome'\nprint(message)\n#dri",
        "detail": "2string_1",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "3integers",
        "description": "3integers",
        "peekOfCode": "num2 =  2\nprint(num1 == num2)  # gives bool op\nprint(num1 != num2)\nprint(num1 >= num2)\nprint(num1 <= num2)\n# string value to num\nn1= \"100\"\nn2 =\"200\"\nprint(n1 + n2)\n#casting",
        "detail": "3integers",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "3integers",
        "description": "3integers",
        "peekOfCode": "n1 =  int(n1)\nn2 = int(n2)\nprint(n1 + n2)",
        "detail": "3integers",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "3integers",
        "description": "3integers",
        "peekOfCode": "n2 = int(n2)\nprint(n1 + n2)",
        "detail": "3integers",
        "documentation": {}
    },
    {
        "label": "courses",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "courses = [\"History\" , \"maths\" ,\"Sceince\" ,\"physics\"]\nprint (courses[-1]) # for last items\nprint (courses[0])\nprint (courses[0:3]) #print f4rom 0  to 3 index but print 3 value\n# append\ncourses.append(\"Data Science\")  # append value at the end of list\nprint(courses)\ncourses.insert( 0,\"Data Science\") # insert the valuse at the given inedex\nprint(courses)\n#insert method",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "courses1",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "courses1 = [\"History\" , \"maths\" ,\"Sceince\" ,\"physics\"]\ncourses2 = [\"Javascript\" , \"react\" ,\"node\"] # below this values are stored at index 0\n# courses1.insert(0, courses2)\nprint(courses1)\nprint(courses1[0])\n#extend method for soving above problem in line 17- 18 append also give same error\ncourses1.extend(courses2)\nprint(courses1)\n#remove value\ncourses3 = [\"History\" , \"maths\" ,\"Sceince\" ,\"physics\"]",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "courses2",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "courses2 = [\"Javascript\" , \"react\" ,\"node\"] # below this values are stored at index 0\n# courses1.insert(0, courses2)\nprint(courses1)\nprint(courses1[0])\n#extend method for soving above problem in line 17- 18 append also give same error\ncourses1.extend(courses2)\nprint(courses1)\n#remove value\ncourses3 = [\"History\" , \"maths\" ,\"Sceince\" ,\"physics\"]\n# courses3.remove(\"History\")",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "courses3",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "courses3 = [\"History\" , \"maths\" ,\"Sceince\" ,\"physics\"]\n# courses3.remove(\"History\")\nprint(courses3)\n# pop it renove the last value \npopr = courses3.pop()\nprint(courses3)\nprint(popr)\n#  methodes sort  list\nlist = [\"History\" , \"maths\" ,\"sceince\" ,\"physics\"]\n# reverse",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "popr",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "popr = courses3.pop()\nprint(courses3)\nprint(popr)\n#  methodes sort  list\nlist = [\"History\" , \"maths\" ,\"sceince\" ,\"physics\"]\n# reverse\nlist.reverse()\nprint(list)\n#sorting by alphabetial order\nnums = [1,4,6,7,23,7,2,4,23,5,34]",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "list = [\"History\" , \"maths\" ,\"sceince\" ,\"physics\"]\n# reverse\nlist.reverse()\nprint(list)\n#sorting by alphabetial order\nnums = [1,4,6,7,23,7,2,4,23,5,34]\n# nums.sort()\nnums.sort(reverse=True) # print in reverse order\nprint(nums)\n# another is sorted function also / but we want to store that in some varaible",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "nums = [1,4,6,7,23,7,2,4,23,5,34]\n# nums.sort()\nnums.sort(reverse=True) # print in reverse order\nprint(nums)\n# another is sorted function also / but we want to store that in some varaible\nnums1 = [1,4,6,7,23,7,2,4,23,5,34]\nns = sorted(nums1)\nprint(ns)\n# min max sum\nprint(min(nums1))",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "nums1",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "nums1 = [1,4,6,7,23,7,2,4,23,5,34]\nns = sorted(nums1)\nprint(ns)\n# min max sum\nprint(min(nums1))\nprint(max(nums1))\nprint(sum(nums1))\n# getting value index\nlist1 = [\"History\" , \"maths\" ,\"Science\" ,\"physics\"]\nprint(list1.index(\"Science\"))",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "ns",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "ns = sorted(nums1)\nprint(ns)\n# min max sum\nprint(min(nums1))\nprint(max(nums1))\nprint(sum(nums1))\n# getting value index\nlist1 = [\"History\" , \"maths\" ,\"Science\" ,\"physics\"]\nprint(list1.index(\"Science\"))\n# checing value ans in bool",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "list1 = [\"History\" , \"maths\" ,\"Science\" ,\"physics\"]\nprint(list1.index(\"Science\"))\n# checing value ans in bool\nprint(\"Science\" in list1)\n# for in loop\nfor item in list1:\n    print(item)\n# for print index and  item boath // also pass start param\nfor index ,item in enumerate(list1 , start=1):\n    print(index,item)",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "list12",
        "kind": 5,
        "importPath": "4listTuples",
        "description": "4listTuples",
        "peekOfCode": "list12 = ','.join(list1)\nprint(list12)\n# we cant append in ( tuple )seen muatible example\n# tup1=(\"History\" , \"maths\" ,\"Science\" ,\"physics\")\n# tup2 =tup1\n# tup1[0]= \"art\" # cant appent \n# print(tup1)\n# print(tup2)\nprint(\"set.....\")\n# sets",
        "detail": "4listTuples",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 5,
        "importPath": "5dictonaries",
        "description": "5dictonaries",
        "peekOfCode": "student = {'name': 'john' , 'age':25 ,\"course\": ['maths', \"ds\"]}\nprint(student['course'])\nprint(student.get(\"name\"))\nstudent['phone']='555-55555'\nprint(student.get(\"phone\",'not found'))\nprint(student)\n# updte\nstudent.update({'name': 'john' , 'age':25 ,\"course\": ['maths', \"ds\"], 'phone':555-55555})\n# delete\n# del student['age']",
        "detail": "5dictonaries",
        "documentation": {}
    },
    {
        "label": "pp",
        "kind": 5,
        "importPath": "5dictonaries",
        "description": "5dictonaries",
        "peekOfCode": "pp = student.pop(\"age\")\nprint(student)\nprint(pp)\nprint(student.items()) # print item\nprint(student.keys()) # print key\n# for method\nfor key in student:\n    print(key)\n# for method for both the key and value \nfor key,value in student.items():",
        "detail": "5dictonaries",
        "documentation": {}
    },
    {
        "label": "lang",
        "kind": 5,
        "importPath": "6conditionbool",
        "description": "6conditionbool",
        "peekOfCode": "lang = 'python'\n# a = input(\"enter\")\nif lang == 'python':\n    print('conditional was True')\nelif lang == 'java':\n    print(\"it is a java\")\nelif lang == 'js':\n    print(\"it is a js\")\nelse:\n    print(\"not match\")",
        "detail": "6conditionbool",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 5,
        "importPath": "6conditionbool",
        "description": "6conditionbool",
        "peekOfCode": "login = True  # \" \" , [] , {} Dictonaries, () , 0 empty this will give false answer\nif user == 'Admin' and login:\n# if user == 'Admin' or login: print admin page\n    print('admin page')\nelse:\n    print(\"bad credits\")\na =[1,2,3] \nb =[1,2,3]\nprint(a==b) # true\nprint(a is b) # false",
        "detail": "6conditionbool",
        "documentation": {}
    },
    {
        "label": "ask_llm",
        "kind": 2,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "def ask_llm(prompt):\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",  # Or \"gpt-4\"\n        messages=[\n            {\"role\": \"user\", \"content\": prompt}\n        ],\n        temperature=0.7\n    )\n    return response.choices[0].message.content\ndef main():",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "def main():\n    print(\"Hello! I'm your LLM Agent. Ask me anything.\")\n    while True:\n        try:\n            user_input = input(\"You: \")\n            if user_input.lower() in ['exit', 'quit']:\n                print(\"Goodbye!\")\n                break\n            answer = ask_llm(user_input)\n            print(f\"AI: {answer}\")",
        "detail": "agent",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "agent",
        "description": "agent",
        "peekOfCode": "client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\ndef ask_llm(prompt):\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo\",  # Or \"gpt-4\"\n        messages=[\n            {\"role\": \"user\", \"content\": prompt}\n        ],\n        temperature=0.7\n    )\n    return response.choices[0].message.content",
        "detail": "agent",
        "documentation": {}
    }
]